So what does this code do? First we need some terminology. Python is an object-oriented language, almost everything in python is a class and when you create an instance of a class you get an object. Classes have methods associated to them. A method (also called a member function) is used to interact with or control the object.
====
7. Safe mode and factory reset

If something goes wrong with your pyboard, don’t panic! It is almost impossible for you to break the pyboard by programming the wrong thing.

The first thing to try is to enter safe mode: this temporarily skips execution of boot.py and main.py and gives default USB settings.

====
https://docs.micropython.org/en/v1.9.3/pyboard/pyboard/tutorial/reset.html

====
Inline assembler functions are denoted by a special function decorator. Let’s start with the simplest example:

@micropython.asm_thumb
def fun():
    movw(r0, 42)


====
https://docs.micropython.org/en/v1.9.3/pyboard/pyboard/tutorial/fading_led.html

====

MicroPython-specific libraries

Functionality specific to the MicroPython implementation is available in the following libraries.

    btree – simple BTree database
    framebuf — Frame buffer manipulation
    machine — functions related to the hardware
    micropython – access and control MicroPython internals
    network — network configuration
    uctypes – access binary data in a structured way


====

MicroPython-specific libraries

Functionality specific to the MicroPython implementation is available in the following libraries.

    btree – simple BTree database
    framebuf — Frame buffer manipulation
    machine — functions related to the hardware
    micropython – access and control MicroPython internals
    network — network configuration
    uctypes – access binary data in a structured way

====
How do I use push commands in GitHub?
Check your branch

    Create and checkout to a new branch from your current commit: git checkout -b [branchname]
    Then, push the new branch up to the remote: git push -u origin [branchname]
    
====
 https://docs.micropython.org/en/latest/esp32/quickref.html
 I2C
 ====
 from machine import Pin, SoftI2C

i2c = SoftI2C(scl=Pin(5), sda=Pin(4), freq=100000)

i2c.scan()              # scan for devices

i2c.readfrom(0x3a, 4)   # read 4 bytes from device with address 0x3a
i2c.writeto(0x3a, '12') # write '12' to device with address 0x3a

buf = bytearray(10)     # create a buffer with 10 bytes
i2c.writeto(0x3a, buf)  # write the given buffer to the peripheral

====

Hardware I2C bus¶

There are two hardware I2C peripherals with identifiers 0 and 1. Any available output-capable pins can be used for SCL and SDA but the defaults are given below.

	

I2C(0)
	

I2C(1)

scl
	

18
	

25

sda
	

19
	

26

The driver is accessed via the machine.I2C class and has the same methods as software I2C above:

from machine import Pin, I2C

i2c = I2C(0)
i2c = I2C(1, scl=Pin(5), sda=Pin(4), freq=400000)
https://docs.micropython.org/en/latest/esp32/quickref.html
====

    

